[{"/Users/thinkjs/think-table/src/index.js":"1","/Users/thinkjs/think-table/src/reportWebVitals.js":"2","/Users/thinkjs/think-table/src/App.js":"3","/Users/thinkjs/think-table/src/components/Dashbaord/Dashboard.js":"4","/Users/thinkjs/think-table/src/JsonData.js":"5","/Users/thinkjs/think-table/src/commons/Search/Search.js":"6","/Users/thinkjs/think-table/src/commons/ToggleButton/ToggleButton.js":"7"},{"size":500,"mtime":1621577724292,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1621570202503,"results":"10","hashOfConfig":"9"},{"size":191,"mtime":1621578041752,"results":"11","hashOfConfig":"9"},{"size":5280,"mtime":1621579171283,"results":"12","hashOfConfig":"9"},{"size":3170,"mtime":1621578187291,"results":"13","hashOfConfig":"9"},{"size":709,"mtime":1621578962208,"results":"14","hashOfConfig":"9"},{"size":970,"mtime":1621608112877,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"7phnn2",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/thinkjs/think-table/src/index.js",[],["32","33"],"/Users/thinkjs/think-table/src/reportWebVitals.js",[],"/Users/thinkjs/think-table/src/App.js",[],"/Users/thinkjs/think-table/src/components/Dashbaord/Dashboard.js",["34"],"import React, {useState} from 'react';\nimport { tableData } from \"../../JsonData\";\nimport Search from \"../../commons/Search/Search\";\nimport ToggleButton from \"../../commons/ToggleButton/ToggleButton\"\nimport \"./Dashboard.css\"\n\nfunction Dashboard(props) {\n\n    const tableHeaders = [\n        \"ID\",\n        \"Amount\",\n        \"Time Period\",\n        \"Credits Used\",\n        \"Status\",\n        \" \",\n      ];\n      //Local State\n      const [invoices, setInvoices] = useState(tableData);\n      const [toggle, setToggle] = useState(false)\n\n      //Functions\n      const sortColumnFun = (i) => {\n        setToggle(!toggle);\n        console.log(toggle);\n        let arrToBeSorted = [];\n        switch (i) {\n          case \"ID\":\n            invoices?.map((invoiceData) => {\n              return arrToBeSorted.push(invoiceData.id);\n            });\n            if (toggle === true) {\n              invoices.sort(function (a, b) {\n                if (a.id === b.id) {\n                  return 0;\n                }\n                if (typeof a.id === typeof b.id) {\n                  return a.id < b.id ? 1 : -1;\n                }\n                return typeof a.id < typeof b.id ? 1 : -1;\n              });\n            } else if (toggle === false) {\n              arrToBeSorted.sort(function (a, b) {\n                if (a.id === b.id) {\n                  return 0;\n                }\n                if (typeof a.id === typeof b.id) {\n                  return a.id < b.id ? -1 : 1;\n                }\n                return typeof a.id < typeof b.id ? -1 : 1;\n              });\n            }\n            break;\n          case \"Amount\":\n            invoices.map((invoiceData) => {\n              return arrToBeSorted.push(invoiceData.invoiceAmount);\n            });\n            if (toggle === true) {\n              invoices.sort(function (a, b) {\n                if (a.invoiceAmount === b.invoiceAmount) {\n                  return 0;\n                }\n                if (typeof a.invoiceAmount === typeof b.invoiceAmount) {\n                  return a.invoiceAmount < b.invoiceAmount ? 1 : -1;\n                }\n                return typeof a.invoiceAmount < typeof b.invoiceAmount ? 1 : -1;\n              });\n            } else if (toggle === false) {\n              arrToBeSorted.sort(function (a, b) {\n                if (a.invoiceAmount === b.invoiceAmount) {\n                  return 0;\n                }\n                if (typeof a.invoiceAmount === typeof b.invoiceAmount) {\n                  return a.invoiceAmount < b.invoiceAmount ? -1 : 1;\n                }\n                return typeof a.invoiceAmount < typeof b.invoiceAmount ? -1 : 1;\n              });\n            }\n            break;\n            case \"Credits Used\":\n            invoices.map((invoiceData) => {\n              return arrToBeSorted.push(invoiceData.creditsUsed);\n            });\n            if (toggle === true) {\n              invoices.sort(function (a, b) {\n                if (a.creditsUsed === b.creditsUsed) {\n                  return 0;\n                }\n                if (typeof a.creditsUsed === typeof b.creditsUsed) {\n                  return a.creditsUsed < b.creditsUsed ? 1 : -1;\n                }\n                return typeof a.creditsUsed < typeof b.creditsUsed ? 1 : -1;\n              });\n            } else if (toggle === false) {\n              arrToBeSorted.sort(function (a, b) {\n                if (a.creditsUsed === b.creditsUsed) {\n                  return 0;\n                }\n                if (typeof a.creditsUsed === typeof b.creditsUsed) {\n                  return a.creditsUsed < b.creditsUsed ? -1 : 1;\n                }\n                return typeof a.creditsUsed < typeof b.creditsUsed ? -1 : 1;\n              });\n            }\n        }\n      };\n      const handleChange = (newVal) => {\n        // console.log(newVal);\n        let filteredData = tableData.filter((data) => {\n          return data.id === newVal;\n        });\n        setInvoices(filteredData);\n      };\n\n      //Component\n      const NavBar = () => {\n        return (\n          <div className=\"nav-search\">\n              <Search onChange={handleChange}/>\n              <ToggleButton/>\n          </div>\n        );\n      };\n\n    return (\n        <div className=\"container\">\n      <header className=\"site-header\">\n        <h3>Invoices</h3>\n        <NavBar />\n      </header>\n      <table className=\"invoice-data\">\n        <tr styles={{ width: \"50px\" }}>\n          {tableHeaders.map((i) => {\n            return <th onClick={() => sortColumnFun(i)}> {i}</th>;\n          })}\n        </tr>\n        {invoices.map((user, i) => {\n          return (\n            <tbody key={i}>\n              <tr className=\"border-bottom\">\n                <td>{user.id ? user.id : \"-\"}</td>\n                <td>{user.invoiceAmount ? user.invoiceAmount : \"-\"}</td>\n                <td>{user.billingPeriod ? user.billingPeriod : \"NA\"}</td>\n                <td>{user.creditsUsed ? user.creditsUsed : \"-\"}</td>\n                <td>\n                  {user.invoicePaymentStatus ? user.invoicePaymentStatus : \"-\"}\n                </td>\n                <td>\n                  <button>Recipt</button>\n                </td>\n              </tr>\n            </tbody>\n          );\n        })}\n      </table>\n    </div>\n    );\n}\n\nexport default Dashboard;","/Users/thinkjs/think-table/src/JsonData.js",[],"/Users/thinkjs/think-table/src/commons/Search/Search.js",[],"/Users/thinkjs/think-table/src/commons/ToggleButton/ToggleButton.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":26,"column":9,"nodeType":"41","messageId":"42","endLine":104,"endColumn":10},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]